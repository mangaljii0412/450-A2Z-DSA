class Solution {
public:

int solve(int i , int j , vector<vector<int>> &dp , vector<vector<int>>& obstacleGrid){
        if(i == 0 && j == 0) return 1;
        if(i < 0 || j < 0) return 0;
        if(obstacleGrid[i][j] == 1) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int up = solve(i-1 , j , dp , obstacleGrid);
        int left = solve(i , j-1 , dp , obstacleGrid);
        return dp[i][j] = up + left;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(obstacleGrid[0][0] == 1) return 0;
        // vector<vector<int>> dp(m , vector<int> (n,-1));
        // return solve(m-1 , n-1 ,dp ,obstacleGrid);

        // vector<vector<int>> ans(m,vector<int>(n,0));
        // for(int i = 0 ; i < m ; i++){
        //     for(int j = 0 ; j < n ; j++){
        //         if(obstacleGrid[i][j] == 1) ans[i][j] = 0 ;
        //         else if(i == 0 && j == 0) ans[i][j] = 1 ;
        //         else {
        //             int up = 0 ;
        //             int left = 0;
        //             if(i>0) up = ans[i-1][j];
        //             if(j>0) left = ans[i][j-1];
        //             ans[i][j] = up+left;
        //         }
        //     }
        // }
        // return ans[m-1][n-1];

        vector<int> dp(n,0);
        for(int i = 0 ; i < m ; i++){
            vector<int> temp(n,0);
            for(int j = 0 ; j < n ; j++){
                if(obstacleGrid[i][j] == 1) temp[j] = 0 ;
                else if(i == 0 && j ==0) temp[j] = 1 ;
                else {
                    int up = 0 ;
                    int left = 0;
                    if(i>0) up = dp[j];
                    if(j>0) left = temp[j-1];
                    temp[j] = up+left;
                }
            }
            dp = temp;
        }
        return dp[n-1];
    }
};
