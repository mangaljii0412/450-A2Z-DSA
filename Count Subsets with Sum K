
long long modulo = 1e9 + 7;
int solve(int ind , int target , vector<int> &arr ,vector<vector<int>> &dp){
	if(target==0 && arr[ind]==0) return 2;
	if(ind == 0) return (arr[ind] == target);
	if(dp[ind][target] != -1) return dp[ind][target];
	int notpick = solve(ind-1 , target , arr ,dp);
	int pick = 0 ;
	if(arr[ind] <= target) pick = solve(ind-1 , target-arr[ind] , arr , dp);
	return dp[ind][target] = ((notpick % modulo) + (pick % modulo)) % modulo;
}

int findWays(vector<int>& arr, int k)
{
	int n = arr.size();
	// vector<vector<int>> dp(n,vector<int> (k+1,-1));
	// return solve(n-1 , k , arr ,dp);

	// vector<vector<int>> dp(n,vector<int> (k+1,0));
	// for(int i = 0 ; i < n ; i++) dp[i][0] = 1;
	// if(arr[0] <= k) dp[0][arr[0]] = 1;

	// for(int ind = 1 ; ind < n ; ind++){
	// 	for(int target = 1 ; target <= k ;target++){
	// 		int notpick = dp[ind-1][target];
	// 		int pick = 0 ;
	// 		if(arr[ind] <= target) pick = dp[ind-1][target-arr[ind]];
	// 		dp[ind][target] = ((notpick % modulo) + (pick % modulo)) % modulo;
	// 	}
	// }
	// return dp[n-1][k];
    

    vector<int> prev(k+1,0) , curr(k+1);
	prev[0] = curr[0] = 1;
	if(arr[0] <= k) prev[arr[0]] = 1;
	for(int ind = 1 ; ind < n ; ind++){
		for(int target = 1 ; target <= k ;target++){
			int notpick = prev[target];
			int pick = 0 ;
			if(arr[ind] <= target) pick = prev[target-arr[ind]];
			curr[target] = ((notpick % modulo) + (pick % modulo)) % modulo;
		}
        prev = curr;
	}
	return prev[k];
}
