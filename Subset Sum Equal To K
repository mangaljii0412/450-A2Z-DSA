#include <bits/stdc++.h> 

bool solve(int index , int target , vector<int> &arr , vector<vector<int>> &dp){
    if(target == 0) return true;
    if(index == 0) return (arr[0] == target);
    if(dp[index][target] != -1) return dp[index][target];
    bool nottake = solve(index-1 , target , arr ,dp);
    bool take = false;
    if(target >= arr[index]) take = solve(index-1 , target-arr[index] , arr , dp);
    return dp[index][target] = take || nottake;
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // vector<vector<int>> dp(n , vector<int>(k+1 ,-1));
    // return solve(n-1 , k , arr ,dp);

    // vector<vector<bool>> dp(n , vector<bool>(k+1 ,0));
    // for(int i = 0 ; i < n ; i++){
    //     dp[i][0] = true;
    // }
    // dp[0][arr[0]] = true;
    // for(int i = 1 ; i < n ; i++){
    //     for(int target = 1 ; target <= k ; target++){
    //         bool nottake = dp[i-1][target];
    //         bool take = false;
    //         if(target >= arr[i]) take = dp[i-1][target-arr[i]];
    //         dp[i][target] = take || nottake;
    //     }
    // }
    // return dp[n-1][k];

    vector<bool> dp(k+1) ,  curr(k+1);
    dp[0] = curr[0] = true;
    dp[arr[0]] = true;
    for(int i = 1 ; i < n ; i++){
        for(int target = 1 ; target <= k ; target++){
            bool nottake = dp[target];
            bool take = false;
            if(target >= arr[i]) take = dp[target-arr[i]];
            curr[target] = take || nottake;
        }
        dp = curr;
    }
    return dp[k];


}
