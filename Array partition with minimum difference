int minSubsetSumDifference(vector<int>& arr, int n)
{
		    int totalsum = 0;
        for(int i = 0 ; i < n ; i++) totalsum += arr[i];
        int k = totalsum;
        vector<vector<bool>>dp(n,vector<bool>(k+1 , 0));
        for(int i = 0 ; i < n ;i++) dp[i][0] = true;
        if(arr[0] <= k) dp[0][arr[0]] = true;
        for(int ind = 1; ind < n ; ind++){
            for(int target =  1; target <= k ; target++){
                bool nottake = dp[ind-1][target];
                bool take = false;
                if(arr[ind] <= target) take = dp[ind-1][target - arr[ind]];
                dp[ind][target] = nottake | take;
            }
        }

        int mini = 1e9;
        for(int s1 = 0 ; s1 <= totalsum/2 ; s1++){
            if(dp[n-1][s1] == true){
                mini = min(mini , abs((totalsum - s1) - s1));
            }
        }
        return mini;
}




// 2nd solution

int minSubsetSumDifference(vector<int>& arr, int n)
{
	int totSum = 0;
    for (int i = 0; i < n; i++) {
        totSum += arr[i];
    }
    int k = totSum;
    vector<bool> dp(k+1) ,  curr(k+1);
    dp[0] = curr[0] = true;
    dp[arr[0]] = true;
    for(int i = 1 ; i < n ; i++){
        for (int target = 1; target <= k; target++) {
          bool nottake = dp[target];
          bool take = false;
          if (target >= arr[i])
            take = dp[target - arr[i]];
          curr[target] = take || nottake;
        }
        dp = curr;
    }

    int mini = 1e9;
    for(int i = 0; i <= totSum; i++) {
        if (dp[i] == true) {
            int diff = abs(i - (totSum - i));
            mini = min(mini, diff);
        }
    }
    return mini;
}



