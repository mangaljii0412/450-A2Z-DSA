class Solution {
public:

    bool ispossible(vector<int> &nums , int mid , int threshold){
        int n = nums.size();
        int result = 0;
        for(int i = 0 ; i < n ; i++){
            result += ceil((double)nums[i] / mid );
        }
        if(result <= threshold) return true;
        return false;
    }
    int smallestDivisor(vector<int>& nums, int threshold) {
        int start = 1 ;
        int end = *max_element(nums.begin(),nums.end());
        int ans ;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(ispossible(nums,mid,threshold)){
                ans = mid;
                end = mid-1;
            }
            else {
                start = mid+1;
            }
        }
        return ans;
    }
};
