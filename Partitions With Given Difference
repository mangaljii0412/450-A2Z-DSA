#include <bits/stdc++.h> 
long long modulo = 1e9 + 7;
int solve(int ind , int target , vector<int> &arr ,vector<vector<int>> &dp){

	if(ind == 0) {
		if(target == 0 && arr[0] == 0) return 2;
		if(target == 0 || arr[0] == target) return 1;
		return 0;
	} 
	if(dp[ind][target] != -1) return dp[ind][target];
	int notpick = solve(ind-1 , target , arr ,dp);
	int pick = 0 ;
	if(arr[ind] <= target) pick = solve(ind-1 , target-arr[ind] , arr , dp);
	return dp[ind][target] = ((notpick % modulo) + (pick % modulo)) % modulo;
}

int findWays(vector<int>& arr, int k)
{
	int n = arr.size();
	vector<vector<int>> dp(n,vector<int> (k+1,0));
	if(arr[0] == 0) dp[0][0] = 2;
    else dp[0][0] = 1;
	if(arr[0] != 0 && arr[0] <= k) dp[0][arr[0]] = 1;
	for(int ind = 1 ; ind < n ; ind++){
        for (int target = 0; target <= k; target++) {
            int notpick = dp[ind - 1][target];
            int pick = 0;
            if (arr[ind] <= target)
            pick = dp[ind - 1][target - arr[ind]];
            dp[ind][target] = ((notpick % modulo) + (pick % modulo)) % modulo;
            }
        }
        return dp[n - 1][k];
    }
int findWays(vector<int> &arr, int k) {
        int n = arr.size();
        vector<vector<int>> dp(n,vector<int> (k+1,-1));
        return solve(n-1 , k , arr ,dp);
}
int countPartitions(int n, int d, vector<int> &arr) {
    int totalsum = 0;
    for(auto it : arr) totalsum += it;
    if((totalsum - d) < 0 || (totalsum - d) % 2 != 0) return false;
    return findWays(arr , (totalsum-d)/2); 
}


