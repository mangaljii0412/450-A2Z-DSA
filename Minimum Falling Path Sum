class Solution {
public:

int solve(int i , int j , vector<vector<int>> &dp , vector<vector<int>> &matrix){
    if(j < 0 || j >= matrix[0].size()) return 1e8;
    if(i == 0) return matrix[0][j];
    if(dp[i][j] != INT_MAX) return dp[i][j];
    int up = matrix[i][j] + solve(i-1 , j , dp , matrix);
    int leftup = matrix[i][j] + solve(i-1 , j-1 , dp , matrix);
    int rightup = matrix[i][j] + solve(i-1 , j+1 , dp , matrix);

    return dp[i][j] = min(up , min(leftup , rightup));

}
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        // vector<vector<int>> dp(n+1,vector<int> (m+1,INT_MAX));
        // int mini = 1e8;
        // for(int j = 0 ; j < m ; j++){
        //     mini = min(mini , solve(n-1 , j , dp , matrix));
        // }
        // return mini;

        // 2 Solution

        // vector<vector<int>> dp(n , vector<int> (m,0));
        // for(int j = 0 ; j < m ; j++){
        //     dp[0][j] = matrix[0][j];
        // }

        // for(int i = 1 ; i < n ; i++){
        //     for(int j = 0 ; j < m ;j++){
        //         int up = matrix[i][j] + dp[i-1][j];
        //         int leftup = matrix[i][j] ;
        //         if(j-1 >= 0) leftup += dp[i-1][j-1];
        //         else leftup += 1e8;
        //         int rightup = matrix[i][j];
        //         if(j+1 < m) rightup += dp[i-1][j+1];
        //         else rightup += 1e8;

        //         dp[i][j] = min(up , min(leftup , rightup));
        //     }
        // }
        // int mini = dp[n-1][0];
        // for(int j = 1 ; j < m ; j++){
        //     mini = min(mini , dp[n-1][j]);
        // }
        // return mini;

        // 3 Solution 
        vector<int> dp(m,0);
        for(int j = 0 ; j < m ; j++){
            dp[j] = matrix[0][j];
        }

        for(int i = 1 ; i < n ; i++){
            vector<int> temp(m,0);
            for(int j = 0 ; j < m ;j++){
                int up = matrix[i][j] + dp[j];
                int leftup = matrix[i][j] ;
                if(j-1 >= 0) leftup += dp[j-1];
                else leftup += 1e8;
                int rightup = matrix[i][j];
                if(j+1 < m) rightup += dp[j+1];
                else rightup += 1e8;

                temp[j] = min(up , min(leftup , rightup));
            }
            dp = temp;
        }
        int mini = dp[0];
        for(int j = 1 ; j < m ; j++){
            mini = min(mini , dp[j]);
        }
        return mini;
    }
};
